package dataGeneration;

import com.jakubiak.scenerios.Scenario;
import com.jakubiak.scenerios.TestScenario;

import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class ArrayGenerator {


    public TestScenario generateArray(int size, int min, int max, Scenario scenario) {

        return switch (scenario) {
            // Using a switch statement, evaluate the value of the "scenario" variable
            case RANDOM -> new TestScenario(generateRandomArray(size, min, max), Scenario.RANDOM);
            // If the scenario is "RANDOM", create a new TestScenario object with an array generated by the "generateRandomArray" method and the Scenario.RANDOM enumeration
            case ASCENDING -> new TestScenario(generateAscendingRandomArray(size, min, max), Scenario.ASCENDING);
            case DESCENDING -> new TestScenario(generateDescendingArray(size, min, max), Scenario.DESCENDING);
            case SORTED25 -> new TestScenario(generateFirst25pctSortedArray(size, min, max), Scenario.SORTED25);
            case SORTED50 -> new TestScenario(generateFirst50pctSortedArray(size, min, max), Scenario.SORTED50);
            default -> new TestScenario(generateFirst75pctSortedArray(size, min, max), Scenario.SORTED75);
            // If the scenario is none of the above, create a new TestScenario object with an array generated by the "generateFirst75pctSortedArray" method and the Scenario.SORTED75 enumeration
        };
    }

    private int[] generateRandomArray(int size, int min, int max) {
        Random rand = new Random();                                   // Initialize a new Random object called "rand"
        int[] array = new int[size];                                 // Declare and initialize an integer array called "array" with the specified "size"
        for (int i = 0; i < size; i++) {                            // Loop through the array, using the variable "i" as the index
            array[i] = rand.nextInt((max - min) + 1) + min; // Assign a random integer between "min" and "max" (inclusive) to the current index of the array

        }
        return array;
    }

    private int[] generateAscendingRandomArray(int size, int min, int max) {
        return ThreadLocalRandom.current().ints(min, max)  // Stream of random ints
                .limit(size)                              // Limit the stream to n values
                .boxed()                                 // Convert to Stream of Integer Objects for reverse sorting
                .mapToInt(Integer::intValue)            // Map back to primitive ints
                .toArray();                            // as Array
    }

    public static int[] generateDescendingArray(int size, int min, int max) {
        return ThreadLocalRandom.current().ints(min, max)   // Stream of random ints
                .limit(size)                               // Limit the stream to n values
                .boxed()                                  // Convert to Stream of Integer Objects for reverse sorting
                .sorted(Collections.reverseOrder())      // Sort in reverse Order
                .mapToInt(Integer::intValue)            // Map back to primitive ints
                .toArray();                            // as Array
    }

    private int[] generateFirst25pctSortedArray(int size, int min, int max) {
        int[] array = generateRandomArray(size, min, max);  // Declare and initialize an integer array called "array" with random integers generated by the "generateRandomArray" method
        Arrays.sort(array, 0, size / 4); // Sort the first 25% of the array using the "Arrays.sort" method, starting at index 0 and ending at index (size/4)
        return array;
    }

    private int[] generateFirst50pctSortedArray(int size, int min, int max) {
        int[] array = generateRandomArray(size, min, max);  // Declare and initialize an integer array called "array" with random integers generated by the "generateRandomArray" method
        Arrays.sort(array, 0, size / 2); // Sort the first 50% of the array using the "Arrays.sort" method, starting at index 0 and ending at index (size/2)
        return array;
    }

    private int[] generateFirst75pctSortedArray(int size, int min, int max) {
        int[] array = generateRandomArray(size, min, max);          // Declare and initialize an integer array called "array" with random integers generated by the "generateRandomArray" method
        Arrays.sort(array, 0, (size / 4) * 3);   // Sort the first 75% of the array using the "Arrays.sort" method, starting at index 0 and ending at index (size / 4) * 3)
        return array;
    }
}
